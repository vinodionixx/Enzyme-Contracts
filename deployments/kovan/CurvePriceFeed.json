{
  "address": "0x335e816bb49C0816630FC1322AacbEd04501107B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_addressProvider",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "derivative",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "invariantProxyAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariantProxyAssetDecimals",
          "type": "uint256"
        }
      ],
      "name": "DerivativeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "derivative",
          "type": "address"
        }
      ],
      "name": "DerivativeRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_derivatives",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_invariantProxyAssets",
          "type": "address[]"
        }
      ],
      "name": "addDerivatives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_derivative",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_derivativeAmount",
          "type": "uint256"
        }
      ],
      "name": "calcUnderlyingValues",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "underlyings_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "underlyingAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddressProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "addressProvider_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_derivative",
          "type": "address"
        }
      ],
      "name": "getDerivativeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "invariantProxyAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "invariantProxyAssetDecimals",
              "type": "uint256"
            }
          ],
          "internalType": "struct CurvePriceFeed.DerivativeInfo",
          "name": "derivativeInfo_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundDeployer_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isSupportedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSupported_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_derivatives",
          "type": "address[]"
        }
      ],
      "name": "removeDerivatives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0820ee2026926f64ce9fa9cb696a8780918bf2ace8aed7699973e8a6bda49801",
  "receipt": {
    "to": null,
    "from": "0xEb8CD25028c78Bef31aeB0036A9ACA5A67362e28",
    "contractAddress": "0x335e816bb49C0816630FC1322AacbEd04501107B",
    "transactionIndex": 7,
    "gasUsed": "1285731",
    "logsBloom": "0x
    "blockHash": "0xe4b5b9c835b4f338460f558d4d07d79e0417bc796b859b28ddc07e31dabb52c6",
    "transactionHash": "0x0820ee2026926f64ce9fa9cb696a8780918bf2ace8aed7699973e8a6bda49801",
    "logs": [],
    "blockNumber": 10953284,
    "cumulativeGasUsed": "5499142",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf42Ba848D527c424045ffCC1B3e683A8287Ee9cF",
    "0x0000000000000000000000000000000000000000"
  ],
  "solcInputHash": "1ed26cb306dc88815755ce22053912bc",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"derivative\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"invariantProxyAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariantProxyAssetDecimals\",\"type\":\"uint256\"}],\"name\":\"DerivativeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"derivative\",\"type\":\"address\"}],\"name\":\"DerivativeRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_derivatives\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_invariantProxyAssets\",\"type\":\"address[]\"}],\"name\":\"addDerivatives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_derivative\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_derivativeAmount\",\"type\":\"uint256\"}],\"name\":\"calcUnderlyingValues\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlyingAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addressProvider_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_derivative\",\"type\":\"address\"}],\"name\":\"getDerivativeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"invariantProxyAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invariantProxyAssetDecimals\",\"type\":\"uint256\"}],\"internalType\":\"struct CurvePriceFeed.DerivativeInfo\",\"name\":\"derivativeInfo_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundDeployer_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isSupportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_derivatives\",\"type\":\"address[]\"}],\"name\":\"removeDerivatives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"addDerivatives(address[],address[])\":{\"params\":{\"_derivatives\":\"Curve LP and/or liquidity gauge tokens to add\",\"_invariantProxyAssets\":\"The ordered assets that act as proxies to the pool invariants, corresponding to each item in _derivatives, e.g., WETH for ETH-based pools\"}},\"calcUnderlyingValues(address,uint256)\":{\"params\":{\"_derivative\":\"The derivative to convert\",\"_derivativeAmount\":\"The amount of the derivative to convert\"},\"returns\":{\"underlyingAmounts_\":\"The amount of each underlying asset for the equivalent derivative amount\",\"underlyings_\":\"The underlying assets for the _derivative\"}},\"getAddressProvider()\":{\"returns\":{\"addressProvider_\":\"The `ADDRESS_PROVIDER` variable value\"}},\"getDerivativeInfo(address)\":{\"params\":{\"_derivative\":\"The derivative for which to get the `DerivativeInfo`\"},\"returns\":{\"derivativeInfo_\":\"The `DerivativeInfo` value\"}},\"getFundDeployer()\":{\"returns\":{\"fundDeployer_\":\"The `FUND_DEPLOYER` variable value\"}},\"getOwner()\":{\"details\":\"Ownership is deferred to the owner of the FundDeployer contract\",\"returns\":{\"owner_\":\"The owner\"}},\"isSupportedAsset(address)\":{\"params\":{\"_asset\":\"The asset to check\"},\"returns\":{\"isSupported_\":\"True if the asset is supported\"}},\"removeDerivatives(address[])\":{\"params\":{\"_derivatives\":\"Curve LP and/or liquidity gauge tokens to add\"}}},\"title\":\"CurvePriceFeed Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addDerivatives(address[],address[])\":{\"notice\":\"Adds Curve LP and/or liquidity gauge tokens to the price feed\"},\"calcUnderlyingValues(address,uint256)\":{\"notice\":\"Converts a given amount of a derivative to its underlying asset values\"},\"getAddressProvider()\":{\"notice\":\"Gets the `ADDRESS_PROVIDER` variable\"},\"getDerivativeInfo(address)\":{\"notice\":\"Gets the `DerivativeInfo` for a given derivative\"},\"getFundDeployer()\":{\"notice\":\"Gets the `FUND_DEPLOYER` variable\"},\"getOwner()\":{\"notice\":\"Gets the owner of this contract\"},\"isSupportedAsset(address)\":{\"notice\":\"Checks if an asset is supported by the price feed\"},\"removeDerivatives(address[])\":{\"notice\":\"Removes Curve LP and/or liquidity gauge tokens from the price feed\"}},\"notice\":\"Price feed for Curve pool tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/infrastructure/price-feeds/derivatives/feeds/CurvePriceFeed.sol\":\"CurvePriceFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFundDeployer Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IFundDeployer {\\n    enum ReleaseStatus {PreLaunch, Live, Paused}\\n\\n    function getOwner() external view returns (address);\\n\\n    function getReleaseStatus() external view returns (ReleaseStatus);\\n\\n    function isRegisteredVaultCall(address, bytes4) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4147fc50c342dad395c366634a6bfa76020a76d7710698e2e79ab26ed8f5d31b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../core/fund-deployer/IFundDeployer.sol\\\";\\n\\n/// @title FundDeployerOwnerMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\nabstract contract FundDeployerOwnerMixin {\\n    address internal immutable FUND_DEPLOYER;\\n\\n    modifier onlyFundDeployerOwner() {\\n        require(\\n            msg.sender == getOwner(),\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _fundDeployer) public {\\n        FUND_DEPLOYER = _fundDeployer;\\n    }\\n\\n    /// @notice Gets the owner of this contract\\n    /// @return owner_ The owner\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\n    function getOwner() public view returns (address owner_) {\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\n    function getFundDeployer() external view returns (address fundDeployer_) {\\n        return FUND_DEPLOYER;\\n    }\\n}\\n\",\"keccak256\":\"0xae16a22807bc31d46654889122b8db7ee55b731efc8d6feb4c978d13fee3336d\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/IDerivativePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDerivativePriceFeed Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Simple interface for derivative price source oracle implementations\\ninterface IDerivativePriceFeed {\\n    function calcUnderlyingValues(address, uint256)\\n        external\\n        returns (address[] memory, uint256[] memory);\\n\\n    function isSupportedAsset(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5abbc57ccbf28b2c27a0ee496f0a949a0039912975e8f9a65312d884edd05332\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/feeds/CurvePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../../../../extensions/utils/FundDeployerOwnerMixin.sol\\\";\\nimport \\\"../../../../interfaces/ICurveAddressProvider.sol\\\";\\nimport \\\"../../../../interfaces/ICurveLiquidityGaugeToken.sol\\\";\\nimport \\\"../../../../interfaces/ICurveLiquidityPool.sol\\\";\\nimport \\\"../../../../interfaces/ICurveRegistry.sol\\\";\\nimport \\\"../IDerivativePriceFeed.sol\\\";\\n\\n/// @title CurvePriceFeed Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Price feed for Curve pool tokens\\ncontract CurvePriceFeed is IDerivativePriceFeed, FundDeployerOwnerMixin {\\n    using SafeMath for uint256;\\n\\n    event DerivativeAdded(\\n        address indexed derivative,\\n        address indexed pool,\\n        address indexed invariantProxyAsset,\\n        uint256 invariantProxyAssetDecimals\\n    );\\n\\n    event DerivativeRemoved(address indexed derivative);\\n\\n    // Both pool tokens and liquidity gauge tokens are treated the same for pricing purposes.\\n    // We take one asset as representative of the pool's invariant, e.g., WETH for ETH-based pools.\\n    struct DerivativeInfo {\\n        address pool;\\n        address invariantProxyAsset;\\n        uint256 invariantProxyAssetDecimals;\\n    }\\n\\n    uint256 private constant VIRTUAL_PRICE_UNIT = 10**18;\\n\\n    address private immutable ADDRESS_PROVIDER;\\n\\n    mapping(address => DerivativeInfo) private derivativeToInfo;\\n\\n    constructor(address _fundDeployer, address _addressProvider)\\n        public\\n        FundDeployerOwnerMixin(_fundDeployer)\\n    {\\n        ADDRESS_PROVIDER = _addressProvider;\\n    }\\n\\n    /// @notice Converts a given amount of a derivative to its underlying asset values\\n    /// @param _derivative The derivative to convert\\n    /// @param _derivativeAmount The amount of the derivative to convert\\n    /// @return underlyings_ The underlying assets for the _derivative\\n    /// @return underlyingAmounts_ The amount of each underlying asset for the equivalent derivative amount\\n    function calcUnderlyingValues(address _derivative, uint256 _derivativeAmount)\\n        public\\n        override\\n        returns (address[] memory underlyings_, uint256[] memory underlyingAmounts_)\\n    {\\n        DerivativeInfo memory derivativeInfo = derivativeToInfo[_derivative];\\n        require(\\n            derivativeInfo.pool != address(0),\\n            \\\"calcUnderlyingValues: _derivative is not supported\\\"\\n        );\\n\\n        underlyings_ = new address[](1);\\n        underlyings_[0] = derivativeInfo.invariantProxyAsset;\\n\\n        underlyingAmounts_ = new uint256[](1);\\n        if (derivativeInfo.invariantProxyAssetDecimals == 18) {\\n            underlyingAmounts_[0] = _derivativeAmount\\n                .mul(ICurveLiquidityPool(derivativeInfo.pool).get_virtual_price())\\n                .div(VIRTUAL_PRICE_UNIT);\\n        } else {\\n            underlyingAmounts_[0] = _derivativeAmount\\n                .mul(ICurveLiquidityPool(derivativeInfo.pool).get_virtual_price())\\n                .mul(10**derivativeInfo.invariantProxyAssetDecimals)\\n                .div(VIRTUAL_PRICE_UNIT)\\n                .div(VIRTUAL_PRICE_UNIT);\\n        }\\n\\n        return (underlyings_, underlyingAmounts_);\\n    }\\n\\n    /// @notice Checks if an asset is supported by the price feed\\n    /// @param _asset The asset to check\\n    /// @return isSupported_ True if the asset is supported\\n    function isSupportedAsset(address _asset) public view override returns (bool isSupported_) {\\n        return derivativeToInfo[_asset].pool != address(0);\\n    }\\n\\n    //////////////////////////\\n    // DERIVATIVES REGISTRY //\\n    //////////////////////////\\n\\n    /// @notice Adds Curve LP and/or liquidity gauge tokens to the price feed\\n    /// @param _derivatives Curve LP and/or liquidity gauge tokens to add\\n    /// @param _invariantProxyAssets The ordered assets that act as proxies to the pool invariants,\\n    /// corresponding to each item in _derivatives, e.g., WETH for ETH-based pools\\n    function addDerivatives(\\n        address[] calldata _derivatives,\\n        address[] calldata _invariantProxyAssets\\n    ) external onlyFundDeployerOwner {\\n        require(_derivatives.length > 0, \\\"addDerivatives: Empty _derivatives\\\");\\n        require(\\n            _derivatives.length == _invariantProxyAssets.length,\\n            \\\"addDerivatives: Unequal arrays\\\"\\n        );\\n\\n        ICurveRegistry curveRegistryContract = ICurveRegistry(\\n            ICurveAddressProvider(ADDRESS_PROVIDER).get_registry()\\n        );\\n\\n        for (uint256 i; i < _derivatives.length; i++) {\\n            require(_derivatives[i] != address(0), \\\"addDerivatives: Empty derivative\\\");\\n            require(\\n                _invariantProxyAssets[i] != address(0),\\n                \\\"addDerivatives: Empty invariantProxyAsset\\\"\\n            );\\n            require(!isSupportedAsset(_derivatives[i]), \\\"addDerivatives: Value already set\\\");\\n\\n            // First, try assuming that the derivative is an LP token\\n            address pool = curveRegistryContract.get_pool_from_lp_token(_derivatives[i]);\\n\\n            // If the derivative is not a valid LP token, try to treat it as a liquidity gauge token\\n            if (pool == address(0)) {\\n                // We cannot confirm whether a liquidity gauge token is a valid token\\n                // for a particular liquidity gauge, due to some pools using\\n                // old liquidity gauge contracts that did not incorporate a token\\n                pool = curveRegistryContract.get_pool_from_lp_token(\\n                    ICurveLiquidityGaugeToken(_derivatives[i]).lp_token()\\n                );\\n\\n                // Likely unreachable as above calls will revert on Curve, but doesn't hurt\\n                require(\\n                    pool != address(0),\\n                    \\\"addDerivatives: Not a valid LP token or liquidity gauge token\\\"\\n                );\\n            }\\n\\n            uint256 invariantProxyAssetDecimals = ERC20(_invariantProxyAssets[i]).decimals();\\n            derivativeToInfo[_derivatives[i]] = DerivativeInfo({\\n                pool: pool,\\n                invariantProxyAsset: _invariantProxyAssets[i],\\n                invariantProxyAssetDecimals: invariantProxyAssetDecimals\\n            });\\n\\n            // Confirm that a non-zero price can be returned for the registered derivative\\n            (, uint256[] memory underlyingAmounts) = calcUnderlyingValues(\\n                _derivatives[i],\\n                1 ether\\n            );\\n            require(underlyingAmounts[0] > 0, \\\"addDerivatives: could not calculate valid price\\\");\\n\\n            emit DerivativeAdded(\\n                _derivatives[i],\\n                pool,\\n                _invariantProxyAssets[i],\\n                invariantProxyAssetDecimals\\n            );\\n        }\\n    }\\n\\n    /// @notice Removes Curve LP and/or liquidity gauge tokens from the price feed\\n    /// @param _derivatives Curve LP and/or liquidity gauge tokens to add\\n    function removeDerivatives(address[] calldata _derivatives) external onlyFundDeployerOwner {\\n        require(_derivatives.length > 0, \\\"removeDerivatives: Empty _derivatives\\\");\\n        for (uint256 i; i < _derivatives.length; i++) {\\n            require(_derivatives[i] != address(0), \\\"removeDerivatives: Empty derivative\\\");\\n            require(isSupportedAsset(_derivatives[i]), \\\"removeDerivatives: Value is not set\\\");\\n\\n            delete derivativeToInfo[_derivatives[i]];\\n\\n            emit DerivativeRemoved(_derivatives[i]);\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `ADDRESS_PROVIDER` variable\\n    /// @return addressProvider_ The `ADDRESS_PROVIDER` variable value\\n    function getAddressProvider() external view returns (address addressProvider_) {\\n        return ADDRESS_PROVIDER;\\n    }\\n\\n    /// @notice Gets the `DerivativeInfo` for a given derivative\\n    /// @param _derivative The derivative for which to get the `DerivativeInfo`\\n    /// @return derivativeInfo_ The `DerivativeInfo` value\\n    function getDerivativeInfo(address _derivative)\\n        external\\n        view\\n        returns (DerivativeInfo memory derivativeInfo_)\\n    {\\n        return derivativeToInfo[_derivative];\\n    }\\n}\\n\",\"keccak256\":\"0xaee2a76acb5acd22c2a95c306bd0735b1d9a5b76d3ce06ac2acd6e77436d9d36\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ICurveAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ICurveAddressProvider interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ICurveAddressProvider {\\n    function get_address(uint256) external view returns (address);\\n\\n    function get_registry() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf8da903700c623760de62b3e5d0b01997c68b8847391e23b89081128780e55e1\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ICurveLiquidityGaugeToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ICurveLiquidityGaugeToken interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Common interface functions for all Curve liquidity gauge token contracts\\ninterface ICurveLiquidityGaugeToken {\\n    function lp_token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x2142172a89d38b974b91df05630595b8e67f6eb80004667da6d6d2ac795babfd\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ICurveLiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ICurveLiquidityPool interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ICurveLiquidityPool {\\n    function coins(uint256) external view returns (address);\\n\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaebb16b73cc18fb226034c8094222e11bade3156d7a4beee228e328d531e284d\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ICurveRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ICurveRegistry interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ICurveRegistry {\\n    function get_gauges(address) external view returns (address[10] memory, int128[10] memory);\\n\\n    function get_lp_token(address) external view returns (address);\\n\\n    function get_pool_from_lp_token(address) external view returns (address);\\n}\\n\",\"keccak256\":\"0x1e38723d7fc48cd98001129938c432e1c6ec7fc83cf4121fb97de7ea1d42b9ff\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200174438038062001744833981016040819052620000349162000066565b6001600160601b0319606092831b8116608052911b1660a052620000d1565b80516200006081620000b7565b92915050565b600080604083850312156200007a57600080fd5b600062000088858562000053565b92505060206200009b8582860162000053565b9150509250929050565b60006001600160a01b03821662000060565b620000c281620000a5565b8114620000ce57600080fd5b50565b60805160601c60a05160601c61163f62000105600039806102115280610ca4525080610a345280610c60525061163f6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638f72b1361161005b5780638f72b1361461010157806397c0ac87146101145780639be918e61461011c578063f8c689341461013c57610088565b80630bad9a171461008d57806339cbb63c146100b6578063727212f6146100cb578063893d20e8146100ec575b600080fd5b6100a061009b366004610dd4565b610144565b6040516100ad919061158c565b60405180910390f35b6100c96100c4366004610e94565b610190565b005b6100de6100d9366004610e18565b6107d4565b6040516100ad929190611479565b6100f4610a30565b6040516100ad919061146b565b6100c961010f366004610e52565b610ac8565b6100f4610c5e565b61012f61012a366004610dd4565b610c82565b6040516100ad919061149e565b6100f4610ca2565b61014c610d3b565b506001600160a01b03908116600090815260208181526040918290208251606081018452815485168152600182015490941691840191909152600201549082015290565b610198610a30565b6001600160a01b0316336001600160a01b0316146101d15760405162461bcd60e51b81526004016101c8906114cc565b60405180910390fd5b826101ee5760405162461bcd60e51b81526004016101c89061152c565b82811461020d5760405162461bcd60e51b81526004016101c8906114fc565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a262904b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561026857600080fd5b505afa15801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a09190610dfa565b905060005b848110156107cc5760008686838181106102bb57fe5b90506020020160208101906102d09190610dd4565b6001600160a01b031614156102f75760405162461bcd60e51b81526004016101c89061157c565b600084848381811061030557fe5b905060200201602081019061031a9190610dd4565b6001600160a01b031614156103415760405162461bcd60e51b81526004016101c89061153c565b61036586868381811061035057fe5b905060200201602081019061012a9190610dd4565b156103825760405162461bcd60e51b81526004016101c8906114ec565b6000826001600160a01b031663bdf475c388888581811061039f57fe5b90506020020160208101906103b49190610dd4565b6040518263ffffffff1660e01b81526004016103d0919061146b565b60206040518083038186803b1580156103e857600080fd5b505afa1580156103fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104209190610dfa565b90506001600160a01b03811661056457826001600160a01b031663bdf475c388888581811061044b57fe5b90506020020160208101906104609190610dd4565b6001600160a01b03166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b15801561049857600080fd5b505afa1580156104ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d09190610dfa565b6040518263ffffffff1660e01b81526004016104ec919061146b565b60206040518083038186803b15801561050457600080fd5b505afa158015610518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053c9190610dfa565b90506001600160a01b0381166105645760405162461bcd60e51b81526004016101c8906114dc565b600085858481811061057257fe5b90506020020160208101906105879190610dd4565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156105bf57600080fd5b505afa1580156105d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f79190610f22565b60ff1690506040518060600160405280836001600160a01b0316815260200187878681811061062257fe5b90506020020160208101906106379190610dd4565b6001600160a01b031681526020018290526000808a8a8781811061065757fe5b905060200201602081019061066c9190610dd4565b6001600160a01b0390811682526020808301939093526040918201600020845181549083166001600160a01b031991821617825593850151600182018054919093169416939093179055919091015160029091015560606106f58989868181106106d257fe5b90506020020160208101906106e79190610dd4565b670de0b6b3a76400006107d4565b91505060008160008151811061070757fe5b60200260200101511161072c5760405162461bcd60e51b81526004016101c89061156c565b86868581811061073857fe5b905060200201602081019061074d9190610dd4565b6001600160a01b0316836001600160a01b03168a8a8781811061076c57fe5b90506020020160208101906107819190610dd4565b6001600160a01b03167f609e0cbea48ceadc5f9f75d0320d1093fd97d101190895000da6d3e095ec5352856040516107b9919061159a565b60405180910390a45050506001016102a5565b505050505050565b6060806107df610d3b565b506001600160a01b03808516600090815260208181526040918290208251606081018452815485168082526001830154909516928101929092526002015491810191909152906108415760405162461bcd60e51b81526004016101c8906114ac565b604080516001808252818301909252906020808301908036833701905050925080602001518360008151811061087357fe5b6001600160a01b039290921660209283029190910182015260408051600180825281830190925291828101908036833701905050915080604001516012141561096557610947670de0b6b3a764000061094183600001516001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561090257600080fd5b505afa158015610916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093a9190610f04565b8790610cc6565b90610d09565b8260008151811061095457fe5b602002602001018181525050610a27565b610a0d670de0b6b3a7640000610941670de0b6b3a76400006109418560400151600a0a610a0787600001516001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b1580156109c857600080fd5b505afa1580156109dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a009190610f04565b8b90610cc6565b90610cc6565b82600081518110610a1a57fe5b6020026020010181815250505b505b9250929050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b158015610a8b57600080fd5b505afa158015610a9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac39190610dfa565b905090565b610ad0610a30565b6001600160a01b0316336001600160a01b031614610b005760405162461bcd60e51b81526004016101c8906114cc565b80610b1d5760405162461bcd60e51b81526004016101c8906114bc565b60005b81811015610c59576000838383818110610b3657fe5b9050602002016020810190610b4b9190610dd4565b6001600160a01b03161415610b725760405162461bcd60e51b81526004016101c89061154c565b610b8183838381811061035057fe5b610b9d5760405162461bcd60e51b81526004016101c89061155c565b600080848484818110610bac57fe5b9050602002016020810190610bc19190610dd4565b6001600160a01b031681526020810191909152604001600090812080546001600160a01b03199081168255600182018054909116905560020155828282818110610c0757fe5b9050602002016020810190610c1c9190610dd4565b6001600160a01b03167fc15eb25d807b570f4567baf6e97c7b26d58a7d0512dc85e8db15375a056b860460405160405180910390a2600101610b20565b505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b0390811660009081526020819052604090205416151590565b7f000000000000000000000000000000000000000000000000000000000000000090565b600082610cd557506000610d03565b82820282848281610ce257fe5b0414610d005760405162461bcd60e51b81526004016101c89061151c565b90505b92915050565b6000808211610d2a5760405162461bcd60e51b81526004016101c89061150c565b818381610d3357fe5b049392505050565b604080516060810182526000808252602082018190529181019190915290565b8035610d03816115e0565b8051610d03816115e0565b60008083601f840112610d8357600080fd5b50813567ffffffffffffffff811115610d9b57600080fd5b602083019150836020820283011115610a2957600080fd5b8035610d03816115f7565b8051610d03816115f7565b8051610d0381611600565b600060208284031215610de657600080fd5b6000610df28484610d5b565b949350505050565b600060208284031215610e0c57600080fd5b6000610df28484610d66565b60008060408385031215610e2b57600080fd5b6000610e378585610d5b565b9250506020610e4885828601610db3565b9150509250929050565b60008060208385031215610e6557600080fd5b823567ffffffffffffffff811115610e7c57600080fd5b610e8885828601610d71565b92509250509250929050565b60008060008060408587031215610eaa57600080fd5b843567ffffffffffffffff811115610ec157600080fd5b610ecd87828801610d71565b9450945050602085013567ffffffffffffffff811115610eec57600080fd5b610ef887828801610d71565b95989497509550505050565b600060208284031215610f1657600080fd5b6000610df28484610dbe565b600060208284031215610f3457600080fd5b6000610df28484610dc9565b6000610f4c8383610f60565b505060200190565b6000610f4c8383611462565b610f69816115bb565b82525050565b6000610f7a826115ae565b610f8481856115b2565b9350610f8f836115a8565b8060005b83811015610fbd578151610fa78882610f40565b9750610fb2836115a8565b925050600101610f93565b509495945050505050565b6000610fd3826115ae565b610fdd81856115b2565b9350610fe8836115a8565b8060005b83811015610fbd5781516110008882610f54565b975061100b836115a8565b925050600101610fec565b610f69816115c6565b600061102c6032836115b2565b7f63616c63556e6465726c79696e6756616c7565733a205f64657269766174697681527119481a5cc81b9bdd081cdd5c1c1bdc9d195960721b602082015260400192915050565b60006110806025836115b2565b7f72656d6f766544657269766174697665733a20456d707479205f646572697661815264746976657360d81b602082015260400192915050565b60006110c76049836115b2565b7f6f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652081527f46756e644465706c6f796572206f776e65722063616e2063616c6c207468697360208201526810333ab731ba34b7b760b91b604082015260600192915050565b6000611138603d836115b2565b7f61646444657269766174697665733a204e6f7420612076616c6964204c50207481527f6f6b656e206f72206c697175696469747920676175676520746f6b656e000000602082015260400192915050565b60006111976021836115b2565b7f61646444657269766174697665733a2056616c756520616c72656164792073658152601d60fa1b602082015260400192915050565b60006111da601e836115b2565b7f61646444657269766174697665733a20556e657175616c206172726179730000815260200192915050565b6000611213601a836115b2565b7f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200192915050565b600061124c6021836115b2565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b600061128f6022836115b2565b7f61646444657269766174697665733a20456d707479205f646572697661746976815261657360f01b602082015260400192915050565b60006112d36029836115b2565b7f61646444657269766174697665733a20456d70747920696e76617269616e74508152681c9bde1e505cdcd95d60ba1b602082015260400192915050565b600061131e6023836115b2565b7f72656d6f766544657269766174697665733a20456d707479206465726976617481526269766560e81b602082015260400192915050565b60006113636023836115b2565b7f72656d6f766544657269766174697665733a2056616c7565206973206e6f74208152621cd95d60ea1b602082015260400192915050565b60006113a8602f836115b2565b7f61646444657269766174697665733a20636f756c64206e6f742063616c63756c81526e6174652076616c696420707269636560881b602082015260400192915050565b60006113f96020836115b2565b7f61646444657269766174697665733a20456d7074792064657269766174697665815260200192915050565b805160608301906114368482610f60565b5060208201516114496020850182610f60565b50604082015161145c6040850182611462565b50505050565b610f69816115d7565b60208101610d038284610f60565b6040808252810161148a8185610f6f565b90508181036020830152610df28184610fc8565b60208101610d038284611016565b60208082528101610d038161101f565b60208082528101610d0381611073565b60208082528101610d03816110ba565b60208082528101610d038161112b565b60208082528101610d038161118a565b60208082528101610d03816111cd565b60208082528101610d0381611206565b60208082528101610d038161123f565b60208082528101610d0381611282565b60208082528101610d03816112c6565b60208082528101610d0381611311565b60208082528101610d0381611356565b60208082528101610d038161139b565b60208082528101610d03816113ec565b60608101610d038284611425565b60208101610d038284611462565b60200190565b5190565b90815260200190565b6000610d03826115cb565b151590565b6001600160a01b031690565b90565b60ff1690565b6115e9816115bb565b81146115f457600080fd5b50565b6115e9816115d7565b6115e9816115da56fea26469706673582212209af6177c2c99f2a643a5acce0ccafc5258abb249c1a27b9502589ccf4e432be564736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "addDerivatives(address[],address[])": {
        "params": {
          "_derivatives": "Curve LP and/or liquidity gauge tokens to add",
          "_invariantProxyAssets": "The ordered assets that act as proxies to the pool invariants, corresponding to each item in _derivatives, e.g., WETH for ETH-based pools"
        }
      },
      "calcUnderlyingValues(address,uint256)": {
        "params": {
          "_derivative": "The derivative to convert",
          "_derivativeAmount": "The amount of the derivative to convert"
        },
        "returns": {
          "underlyingAmounts_": "The amount of each underlying asset for the equivalent derivative amount",
          "underlyings_": "The underlying assets for the _derivative"
        }
      },
      "getAddressProvider()": {
        "returns": {
          "addressProvider_": "The `ADDRESS_PROVIDER` variable value"
        }
      },
      "getDerivativeInfo(address)": {
        "params": {
          "_derivative": "The derivative for which to get the `DerivativeInfo`"
        },
        "returns": {
          "derivativeInfo_": "The `DerivativeInfo` value"
        }
      },
      "getFundDeployer()": {
        "returns": {
          "fundDeployer_": "The `FUND_DEPLOYER` variable value"
        }
      },
      "getOwner()": {
        "details": "Ownership is deferred to the owner of the FundDeployer contract",
        "returns": {
          "owner_": "The owner"
        }
      },
      "isSupportedAsset(address)": {
        "params": {
          "_asset": "The asset to check"
        },
        "returns": {
          "isSupported_": "True if the asset is supported"
        }
      },
      "removeDerivatives(address[])": {
        "params": {
          "_derivatives": "Curve LP and/or liquidity gauge tokens to add"
        }
      }
    },
    "title": "CurvePriceFeed Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addDerivatives(address[],address[])": {
        "notice": "Adds Curve LP and/or liquidity gauge tokens to the price feed"
      },
      "calcUnderlyingValues(address,uint256)": {
        "notice": "Converts a given amount of a derivative to its underlying asset values"
      },
      "getAddressProvider()": {
        "notice": "Gets the `ADDRESS_PROVIDER` variable"
      },
      "getDerivativeInfo(address)": {
        "notice": "Gets the `DerivativeInfo` for a given derivative"
      },
      "getFundDeployer()": {
        "notice": "Gets the `FUND_DEPLOYER` variable"
      },
      "getOwner()": {
        "notice": "Gets the owner of this contract"
      },
      "isSupportedAsset(address)": {
        "notice": "Checks if an asset is supported by the price feed"
      },
      "removeDerivatives(address[])": {
        "notice": "Removes Curve LP and/or liquidity gauge tokens from the price feed"
      }
    },
    "notice": "Price feed for Curve pool tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 38690,
        "contract": "contracts/release/infrastructure/price-feeds/derivatives/feeds/CurvePriceFeed.sol:CurvePriceFeed",
        "label": "derivativeToInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(DerivativeInfo)38679_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(DerivativeInfo)38679_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CurvePriceFeed.DerivativeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(DerivativeInfo)38679_storage"
      },
      "t_struct(DerivativeInfo)38679_storage": {
        "encoding": "inplace",
        "label": "struct CurvePriceFeed.DerivativeInfo",
        "members": [
          {
            "astId": 38674,
            "contract": "contracts/release/infrastructure/price-feeds/derivatives/feeds/CurvePriceFeed.sol:CurvePriceFeed",
            "label": "pool",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 38676,
            "contract": "contracts/release/infrastructure/price-feeds/derivatives/feeds/CurvePriceFeed.sol:CurvePriceFeed",
            "label": "invariantProxyAsset",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 38678,
            "contract": "contracts/release/infrastructure/price-feeds/derivatives/feeds/CurvePriceFeed.sol:CurvePriceFeed",
            "label": "invariantProxyAssetDecimals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}