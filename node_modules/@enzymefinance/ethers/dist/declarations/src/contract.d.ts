import { Interface } from '@ethersproject/abi';
import { providers, Signer } from 'ethers';
import { ConstructorFunction, ContractReceipt } from './function';
import { AddressLike } from './types';
import { PossibleInterface } from './utils/ensureInterface';
export declare function deploy<TContract extends Contract = Contract, TArgs extends any[] = any>(contract: TContract, bytecode: string, ...args: TArgs): Promise<ContractReceipt<ConstructorFunction<TArgs, TContract>>>;
export declare class Contract<TContract extends Contract = any> {
    readonly address: string;
    readonly abi: Interface;
    deployment?: ContractReceipt<ConstructorFunction<any, TContract>>;
    readonly __TYPE__?: string;
    static isContract(contract: any): contract is Contract;
    private readonly _signer?;
    get signer(): Signer | undefined;
    private readonly _provider?;
    get provider(): providers.Provider;
    constructor(abi: Interface | PossibleInterface, address: AddressLike, provider: providers.Provider | Signer);
    clone(address: AddressLike, provider: Signer | providers.Provider): TContract;
    attach(address: AddressLike): TContract;
    connect(provider: Signer | providers.Provider): TContract;
}
