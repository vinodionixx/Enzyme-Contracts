import { Bytes, BytesLike, Signer } from 'ethers';
import { Contract } from './contract';
import { AddressLike, Send } from './types';
export declare const DoppelgangerCompilerOutput: {
    abi: ({
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        name?: undefined;
        outputs?: undefined;
    } | {
        stateMutability: string;
        type: string;
        inputs?: undefined;
        name?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    })[];
    bytecode: string;
};
export declare type DoppelgangerArgs = [_sighashes: BytesLike[], _signatures: string[]];
export interface Doppelganger extends Contract<Doppelganger> {
    __doppelganger__mockForward: Send<(data: BytesLike, callee: AddressLike) => Bytes, Doppelganger>;
    __doppelganger__mockReturns: Send<(data: BytesLike, value: BytesLike) => void, Doppelganger>;
    __doppelganger__mockReverts: Send<(data: BytesLike, reason: string) => void, Doppelganger>;
    __doppelganger__mockReset: Send<(data: BytesLike) => void, Doppelganger>;
    '__doppelganger__mockForward(bytes,address)': Send<(data: BytesLike, callee: AddressLike) => Bytes, Doppelganger>;
    '__doppelganger__mockReturns(bytes,bytes)': Send<(data: BytesLike, value: BytesLike) => void, Doppelganger>;
    '__doppelganger__mockReverts(bytes,string)': Send<(data: BytesLike, reason: string) => void, Doppelganger>;
    '__doppelganger__mockReset(bytes)': Send<(data: BytesLike) => void, Doppelganger>;
}
export declare class Doppelganger extends Contract<Doppelganger> {
    static deploy(signer: Signer, ...args: DoppelgangerArgs): Promise<Doppelganger>;
}
