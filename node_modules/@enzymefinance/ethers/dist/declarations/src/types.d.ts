import { Wallet } from 'ethers';
import { Contract } from './contract';
import { CallFunction, ContractReceipt, FunctionOptions, SendFunction } from './function';
export declare type AddressLike = Contract | Wallet | string | {
    address: string;
};
export declare type Call<TSignature extends AnyFunction = AnyFunction, TContract extends Contract = Contract> = ProxiedFunction<CallDefinition<TSignature, TContract>>;
export declare type Send<TSignature extends AnyFunction = AnyFunction, TContract extends Contract = Contract> = ProxiedFunction<SendDefinition<TSignature, TContract>>;
export declare type AnyFunction = (...args: any) => any;
export declare type ProxiedFunction<TFunction extends FunctionDefinition> = DerivedFunction<TFunction> & ShortcutFunction<TFunction>;
export interface FunctionDefinition {
    type: 'call' | 'send';
    signature: (...args: any) => any;
    contract: Contract;
    input: any[];
    output: any;
}
declare type CallDefinition<TSignature extends AnyFunction = AnyFunction, TContract extends Contract = Contract> = {
    type: 'call';
    signature: TSignature;
    contract: TContract;
    input: Parameters<TSignature>;
    output: ReturnType<TSignature>;
};
declare type SendDefinition<TSignature extends AnyFunction = AnyFunction, TContract extends Contract = Contract> = {
    type: 'send';
    signature: TSignature;
    contract: TContract;
    input: Parameters<TSignature>;
    output: ReturnType<TSignature>;
};
declare type DerivedFunction<TFunction extends FunctionDefinition> = TFunction extends CallDefinition ? DerivedCallFunction<TFunction> : TFunction extends SendDefinition ? DerivedSendFunction<TFunction> : never;
declare type DerivedSendFunction<TFunction extends SendDefinition> = SendFunction<TFunction['input'], TFunction['output'], TFunction['contract']>;
declare type DerivedCallFunction<TFunction extends CallDefinition> = CallFunction<TFunction['input'], TFunction['output'], TFunction['contract']>;
declare type ShortcutFunction<TFunction extends FunctionDefinition> = {
    (...args: TFunction['input']): ShortcutFunctionOutput<TFunction>;
    (options: FunctionOptions<TFunction['input']>): ShortcutFunctionOutput<TFunction>;
};
declare type ShortcutFunctionOutput<TFunction extends FunctionDefinition> = TFunction extends CallDefinition ? Promise<TFunction['output']> : TFunction extends SendDefinition ? Promise<ContractReceipt<DerivedSendFunction<TFunction>>> : never;
export {};
