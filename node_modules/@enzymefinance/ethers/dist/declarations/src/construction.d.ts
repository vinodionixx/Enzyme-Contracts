import { JsonFragment } from '@ethersproject/abi';
import { providers, Signer, utils } from 'ethers';
import { Contract } from './contract';
import { FunctionOptions } from './function';
import { MockContract } from './mock';
import { AddressLike } from './types';
export interface SolidityCompilerOutput {
    abi: JsonFragment[];
    bytecode?: string;
}
export interface ContractFactory<TContract extends Contract = Contract, TConstructorArgs extends any[] = []> {
    abi: utils.Interface;
    mock(signer: Signer): Promise<MockContract<TContract>>;
    deploy(signer: Signer, ...args: TConstructorArgs): Promise<TContract>;
    deploy(signer: Signer, options: FunctionOptions<TConstructorArgs>): Promise<TContract>;
    new (address: AddressLike, provider: Signer | providers.Provider): TContract;
}
export declare function contract<TContract extends Contract = Contract, TConstructorArgs extends any[] = never>(bytecode?: string): (signatures: TemplateStringsArray) => ContractFactory<TContract, TConstructorArgs>;
