'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var ethers = require('ethers');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');

function getInput(fragment) {
  var inputs = fragment.inputs.map(function (input, index) {
    var name = input.name || "arg".concat(index);
    var type = getType(input, true);
    return "".concat(name, ": ").concat(type);
  });
  return inputs.join(', ');
}
function getOutput(fragment) {
  var _fragment$outputs;

  if (!ethers.utils.FunctionFragment.isFunctionFragment(fragment)) {
    return 'void';
  }

  var outputs = (_fragment$outputs = fragment.outputs) !== null && _fragment$outputs !== void 0 ? _fragment$outputs : [];

  if (!outputs.length) {
    return 'void';
  }

  if (outputs.length === 1) {
    return getType(outputs[0], false);
  }

  var struct = outputs.map(function (param, index) {
    var name = param.name || "'".concat(index, "'");
    return "".concat(name, ": ").concat(getType(param, false));
  });
  return "{ ".concat(struct.join(', '), " }");
}
function getType(param, flexible) {
  if (param.type === 'array' || param.type.substr(-1) === ']') {
    var type = getType(param.arrayChildren, flexible);
    var matches = param.type.match(/\[([0-9]*)\]$/);

    if (matches !== null && matches !== void 0 && matches[1]) {
      // This is a fixed length array.
      var range = Array.from(Array(parseInt(matches[1], 10)).keys());
      return "[".concat(range.map(function () {
        return type;
      }).join(', '), "]");
    } // Arbitrary length array.


    return "".concat(type, "[]");
  }

  if (param.type === 'tuple') {
    var struct = param.components.map(function (param, index) {
      var name = param.name || "'".concat(index, "'");
      return "".concat(name, ": ").concat(getType(param, flexible));
    });
    return "{ ".concat(struct.join(', '), " }");
  }

  if (param.type === 'string') {
    return 'string';
  }

  if (param.type === 'bool') {
    return 'boolean';
  }

  if (param.type === 'address') {
    return flexible ? 'AddressLike' : 'string';
  }

  if (param.type.substring(0, 5) === 'bytes') {
    return flexible ? 'BytesLike' : 'string';
  }

  if (param.type.substring(0, 4) === 'uint') {
    return flexible ? 'BigNumberish' : 'BigNumber';
  }

  if (param.type.substring(0, 3) === 'int') {
    return flexible ? 'BigNumberish' : 'BigNumber';
  }

  return 'any';
}
function generateFunction(contract, fragment) {
  var type = fragment.constant ? 'Call' : 'Send';
  var input = getInput(fragment);
  var output = getOutput(fragment);
  return "".concat(type, "<(").concat(input, ") => ").concat(output, ", ").concat(contract, ">");
}
function generateFunctions(contract, fragments) {
  if (!fragments.length) {
    return '';
  }

  var output = fragments.reduce(function (output, fragment, index, array) {
    var type = generateFunction(contract, fragment);
    var found = array.findIndex(function (current) {
      return fragment.name === current.name;
    });

    if (index === found) {
      output.push("".concat(fragment.name, ": ").concat(type));
    }

    return output;
  }, []);
  return output.join('\n  ');
}
function generateConstructorArgs(fragment) {
  var input = getInput(fragment);
  return input ? "[".concat(input, "]") : '';
}
function generateContract(name, bytecode, abi) {
  var functions = generateFunctions(name, Object.values(abi.functions));
  var constructor = generateConstructorArgs(abi.deploy);
  var generic = "".concat(name).concat(constructor ? ", ".concat(name, "Args") : '');
  var formatted = abi.format(); // prettier-ignore

  return "/* eslint-disable */\n// @ts-nocheck\nimport { BytesLike, BigNumber, BigNumberish } from 'ethers';\nimport { contract, Call, Send, AddressLike, Contract } from '@enzymefinance/ethers';\n\n".concat(constructor ? "export type ".concat(name, "Args = ").concat(constructor, ";") : '', "\n\n// prettier-ignore\nexport interface ").concat(name, " extends Contract<").concat(name, "> {\n  ").concat(functions || '// No external functions', "\n}\n\nlet ").concat(name, "Bytecode: string | undefined = undefined;\n").concat(bytecode ? "if (typeof window === 'undefined') {\n  ".concat(name, "Bytecode = '").concat(bytecode, "';\n}") : '', "\n\n// prettier-ignore\nexport const ").concat(name, " = contract<").concat(generic, ">(").concat(name, "Bytecode)`\n  ").concat(Array.isArray(formatted) ? formatted.join('\n  ') : formatted, "\n`;");
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function prettierConfig() {
  var cwd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();

  try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    var prettier = require('prettier');

    return prettier.resolveConfig.sync(cwd);
  } catch (error) {
    return {};
  }
}
function formatOutput(value) {
  try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    var prettier = require('prettier');

    var defaults = prettierConfig();

    var options = _objectSpread(_objectSpread({}, defaults), {}, {
      parser: 'typescript'
    });

    return prettier.format(value, options);
  } catch (error) {}

  return value;
}

exports.formatOutput = formatOutput;
exports.generateConstructorArgs = generateConstructorArgs;
exports.generateContract = generateContract;
exports.generateFunction = generateFunction;
exports.generateFunctions = generateFunctions;
exports.getInput = getInput;
exports.getOutput = getOutput;
exports.getType = getType;
exports.prettierConfig = prettierConfig;
