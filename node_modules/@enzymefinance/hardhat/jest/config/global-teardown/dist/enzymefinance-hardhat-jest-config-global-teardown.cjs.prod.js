'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var coverage = require('@enzymefinance/coverage');
var fs = require('fs-extra');
var glob = require('glob');
var Reporter = require('istanbul-lib-report');
var Reports = require('istanbul-reports');
var path = require('path');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _regeneratorRuntime__default = /*#__PURE__*/_interopDefault(_regeneratorRuntime);
var fs__default = /*#__PURE__*/_interopDefault(fs);
var glob__default = /*#__PURE__*/_interopDefault(glob);
var Reporter__default = /*#__PURE__*/_interopDefault(Reporter);
var Reports__default = /*#__PURE__*/_interopDefault(Reports);
var path__default = /*#__PURE__*/_interopDefault(path);

var globalTeardown = /*#__PURE__*/(function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(config) {
    var tmp, files, outputs, unique, metadata, hits, coverage$1, context;
    return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (process.env.__HARDHAT_COVERAGE_TEMPDIR__) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return");

          case 2:
            tmp = process.env.__HARDHAT_COVERAGE_TEMPDIR__;
            _context.next = 5;
            return fs__default['default'].pathExists(tmp);

          case 5:
            if (_context.sent) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return");

          case 7:
            files = glob__default['default'].sync(path__default['default'].join(tmp, '*.json'));
            _context.next = 10;
            return Promise.all(files.map(function (file) {
              return fs__default['default'].readJson(file);
            }));

          case 10:
            outputs = _context.sent;

            if (outputs.length) {
              _context.next = 13;
              break;
            }

            return _context.abrupt("return");

          case 13:
            unique = outputs.map(function (item) {
              return item.metadata;
            }).filter(function (item, index, array) {
              return array.indexOf(item) === index;
            });

            if (!(unique.length !== 1)) {
              _context.next = 16;
              break;
            }

            throw new Error('Mismatching code coverage metadata');

          case 16:
            _context.next = 18;
            return fs__default['default'].readJson(unique[0]);

          case 18:
            metadata = _context.sent;
            hits = outputs.reduce(function (carry, current) {
              Object.entries(current.hits).forEach(function (_ref2) {
                var _carry$hash;

                var _ref3 = _slicedToArray(_ref2, 2),
                    hash = _ref3[0],
                    hits = _ref3[1];

                carry[hash] = ((_carry$hash = carry[hash]) !== null && _carry$hash !== void 0 ? _carry$hash : 0) + hits;
              });
              return carry;
            }, {});
            coverage$1 = coverage.mergeCoverageReports(hits, metadata);
            context = Reporter__default['default'].createContext({
              coverageMap: coverage$1,
              dir: config.coverageDirectory,
              watermarks: {
                branches: [50, 80],
                functions: [50, 80],
                lines: [50, 80],
                statements: [50, 80]
              }
            });
            config.coverageReporters.forEach(function (reporter) {
              var report = Reports__default['default'].create(reporter);
              report.execute(context);
            });
            _context.next = 25;
            return fs__default['default'].emptyDir(tmp);

          case 25:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();

exports.default = globalTeardown;
