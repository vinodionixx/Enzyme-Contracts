'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _classCallCheck = require('@babel/runtime/helpers/classCallCheck');
var _createClass = require('@babel/runtime/helpers/createClass');
var _assertThisInitialized = require('@babel/runtime/helpers/assertThisInitialized');
var _get = require('@babel/runtime/helpers/get');
var _inherits = require('@babel/runtime/helpers/inherits');
var _possibleConstructorReturn = require('@babel/runtime/helpers/possibleConstructorReturn');
var _getPrototypeOf = require('@babel/runtime/helpers/getPrototypeOf');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var coverage = require('@enzymefinance/coverage');
var deepmerge = require('deepmerge');
var fs = require('fs-extra');
var constants = require('hardhat/internal/constants');
var context = require('hardhat/internal/context');
var configLoading = require('hardhat/internal/core/config/config-loading');
var envVariables = require('hardhat/internal/core/params/env-variables');
var hardhatParams = require('hardhat/internal/core/params/hardhat-params');
var runtimeEnvironment = require('hardhat/internal/core/runtime-environment');
var typescriptSupport = require('hardhat/internal/core/typescript-support');
var NodeEnvironment = require('jest-environment-node');
var path = require('path');
var uuid = require('uuid');
var provider = require('../../../../dist/provider-da07bfb1.cjs.prod.js');
require('ethers');
require('hardhat-deploy-ethers/dist/src/signer-with-address');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _regeneratorRuntime__default = /*#__PURE__*/_interopDefault(_regeneratorRuntime);
var deepmerge__default = /*#__PURE__*/_interopDefault(deepmerge);
var fs__default = /*#__PURE__*/_interopDefault(fs);
var NodeEnvironment__default = /*#__PURE__*/_interopDefault(NodeEnvironment);
var path__default = /*#__PURE__*/_interopDefault(path);

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var EnzymeHardhatEnvironment = /*#__PURE__*/function (_NodeEnvironment) {
  _inherits(EnzymeHardhatEnvironment, _NodeEnvironment);

  var _super = _createSuper(EnzymeHardhatEnvironment);

  function EnzymeHardhatEnvironment(config) {
    var _config$coverage, _config$history, _process$env$__HARDHA;

    var _this;

    _classCallCheck(this, EnzymeHardhatEnvironment);

    _this = _super.call(this, config);

    _defineProperty(_assertThisInitialized(_this), "metadataFilePath", '');

    _defineProperty(_assertThisInitialized(_this), "tempDir", '');

    _defineProperty(_assertThisInitialized(_this), "codeCoverageRuntimeRecording", {});

    _defineProperty(_assertThisInitialized(_this), "recordCodeCoverage", false);

    _defineProperty(_assertThisInitialized(_this), "recordCallHistory", true);

    _defineProperty(_assertThisInitialized(_this), "runtimeEnvironment", void 0);

    _defineProperty(_assertThisInitialized(_this), "removeCallHistoryListener", void 0);

    _defineProperty(_assertThisInitialized(_this), "removeCodeCoverageListener", void 0);

    _this.recordCodeCoverage = !!((_config$coverage = config.coverage) !== null && _config$coverage !== void 0 ? _config$coverage : false);
    _this.recordCallHistory = !!((_config$history = config.history) !== null && _config$history !== void 0 ? _config$history : true);
    _this.tempDir = (_process$env$__HARDHA = process.env.__HARDHAT_COVERAGE_TEMPDIR__) !== null && _process$env$__HARDHA !== void 0 ? _process$env$__HARDHA : '';

    if (_this.recordCodeCoverage && !_this.tempDir) {
      throw new Error('Missing shared temporary directory for code coverage data collection');
    }

    _this.runtimeEnvironment = getRuntimeEnvironment();
    _this.metadataFilePath = path__default['default'].join(_this.runtimeEnvironment.config.codeCoverage.path, 'metadata.json');
    return _this;
  }

  _createClass(EnzymeHardhatEnvironment, [{
    key: "setup",
    value: function () {
      var _setup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var env, provider$1, metadata, collector;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _get(_getPrototypeOf(EnzymeHardhatEnvironment.prototype), "setup", this).call(this);

              case 2:
                env = this.runtimeEnvironment;
                provider$1 = new provider.EthereumTestnetProvider(env);
                this.global.hre = env;
                this.global.provider = provider$1; // Re-route call history recording to whatever is the currently
                // active history object. Required for making history and snapshoting
                // work nicely together.

                if (this.recordCallHistory) {
                  this.removeCallHistoryListener = addListener(env.network.provider, 'beforeMessage', function (message) {
                    provider$1.history.record(message);
                  });
                }

                if (!this.recordCodeCoverage) {
                  _context.next = 13;
                  break;
                }

                _context.next = 10;
                return fs__default['default'].readJson(this.metadataFilePath);

              case 10:
                metadata = _context.sent;
                collector = coverage.createCoverageCollector(metadata, this.codeCoverageRuntimeRecording);
                this.removeCodeCoverageListener = addListener(env.network.provider, 'step', collector);

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function setup() {
        return _setup.apply(this, arguments);
      }

      return setup;
    }()
  }, {
    key: "teardown",
    value: function () {
      var _teardown = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        var _this$removeCodeCover, _this$removeCallHisto;

        var file, output;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (_this$removeCodeCover = this.removeCodeCoverageListener) === null || _this$removeCodeCover === void 0 ? void 0 : _this$removeCodeCover.call(this);
                (_this$removeCallHisto = this.removeCallHistoryListener) === null || _this$removeCallHisto === void 0 ? void 0 : _this$removeCallHisto.call(this);

                if (!(this.recordCodeCoverage && Object.keys(this.codeCoverageRuntimeRecording).length)) {
                  _context2.next = 7;
                  break;
                }

                file = path__default['default'].join(this.tempDir, "".concat(uuid.v4(), ".json"));
                output = {
                  hits: this.codeCoverageRuntimeRecording,
                  metadata: this.metadataFilePath
                };
                _context2.next = 7;
                return fs__default['default'].outputJson(file, output, {
                  spaces: 2
                });

              case 7:
                _context2.next = 9;
                return _get(_getPrototypeOf(EnzymeHardhatEnvironment.prototype), "teardown", this).call(this);

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function teardown() {
        return _teardown.apply(this, arguments);
      }

      return teardown;
    }()
  }]);

  return EnzymeHardhatEnvironment;
}(NodeEnvironment__default['default']);
var environment;
function getRuntimeEnvironment() {
  if (environment != null) {
    return environment;
  }

  if (context.HardhatContext.isCreated()) {
    context.HardhatContext.deleteHardhatContext();
  }

  var context$1 = context.HardhatContext.createHardhatContext();
  var args = deepmerge__default['default'](envVariables.getEnvHardhatArguments(hardhatParams.HARDHAT_PARAM_DEFINITIONS, process.env), {
    emoji: false,
    help: false,
    network: constants.HARDHAT_NETWORK_NAME,
    version: false
  });

  if (typescriptSupport.willRunWithTypescript(args.config)) {
    typescriptSupport.loadTsNode();
  }

  var config = configLoading.loadConfigAndTasks();
  var extenders = context$1.extendersManager.getExtenders();
  environment = new runtimeEnvironment.Environment(config, args, {}, extenders);
  context$1.setHardhatRuntimeEnvironment(environment);
  return environment;
}
function addListener(provider, event, handler) {
  var inner = provider._provider;

  while (inner._wrapped) {
    inner = inner._wrapped;
  }

  var init = inner._init.bind(inner);

  var subscribed = false;
  var removed = false;
  inner._init = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
    var vm;
    return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return init();

          case 2:
            if (!subscribed && !removed) {
              subscribed = true;
              vm = inner._node._vm;
              vm.on(event, handler);
            }

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return function () {
    var _node;

    if (removed) {
      return;
    }

    removed = true;
    var vm = (_node = inner._node) === null || _node === void 0 ? void 0 : _node._vm;

    if (vm != null) {
      vm.off(event, handler);
    }
  };
}

exports.addListener = addListener;
exports.default = EnzymeHardhatEnvironment;
exports.getRuntimeEnvironment = getRuntimeEnvironment;
