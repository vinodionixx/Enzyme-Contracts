'use strict';

var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _classCallCheck = require('@babel/runtime/helpers/classCallCheck');
var _createClass = require('@babel/runtime/helpers/createClass');
var _assertThisInitialized = require('@babel/runtime/helpers/assertThisInitialized');
var _get = require('@babel/runtime/helpers/get');
var _inherits = require('@babel/runtime/helpers/inherits');
var _possibleConstructorReturn = require('@babel/runtime/helpers/possibleConstructorReturn');
var _getPrototypeOf = require('@babel/runtime/helpers/getPrototypeOf');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var ethers = require('ethers');
var signerWithAddress = require('hardhat-deploy-ethers/dist/src/signer-with-address');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _regeneratorRuntime__default = /*#__PURE__*/_interopDefault(_regeneratorRuntime);

var History = /*#__PURE__*/function () {
  function History(seed) {
    _classCallCheck(this, History);

    _defineProperty(this, "history", new Map());

    if (seed != null) {
      this.history = new Map(seed);
    }
  }

  _createClass(History, [{
    key: "clone",
    value: function clone() {
      return new History(this.history);
    }
  }, {
    key: "override",
    value: function override(history) {
      this.history = new Map(history.history);
    }
  }, {
    key: "clear",
    value: function clear() {
      this.history.clear();
    }
  }, {
    key: "reset",
    value: function reset(contract) {
      var address = contract !== null && contract !== void 0 && contract.address ? contract.address : contract;
      var checksum = ethers.utils.getAddress(address);
      return this.history["delete"](checksum);
    }
  }, {
    key: "calls",
    value: function calls(contract) {
      var _this$history$get;

      var address = contract !== null && contract !== void 0 && contract.address ? contract.address : contract;
      var checksum = ethers.utils.getAddress(address);
      return (_this$history$get = this.history.get(checksum)) !== null && _this$history$get !== void 0 ? _this$history$get : [];
    }
  }, {
    key: "record",
    value: function record(message) {
      var to = message.to ? ethers.utils.hexlify("".concat(message.to)) : '0x';

      if (to === '0x') {
        return;
      }

      var checksum = ethers.utils.getAddress(to);
      var data = message.data ? ethers.utils.hexlify(message.data) : '0x';
      this.history.set(checksum, this.calls(checksum).concat(data));
    }
  }]);

  return History;
}();

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var Snapshots = /*#__PURE__*/function () {
  function Snapshots(provider) {
    _classCallCheck(this, Snapshots);

    this.provider = provider;

    _defineProperty(this, "snapshots", new Map());
  }

  _createClass(Snapshots, [{
    key: "snapshot",
    value: function () {
      var _snapshot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(create, id) {
        var revert, snapshot;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                revert = this.snapshots.get(id !== null && id !== void 0 ? id : create);

                if (!revert) {
                  _context.next = 7;
                  break;
                }

                _context.next = 4;
                return this.revert(revert, create);

              case 4:
                _context.t0 = _context.sent;
                _context.next = 10;
                break;

              case 7:
                _context.next = 9;
                return this.record(create);

              case 9:
                _context.t0 = _context.sent;

              case 10:
                snapshot = _context.t0;
                this.snapshots.set(id !== null && id !== void 0 ? id : create, snapshot);
                this.provider.history.clear();
                return _context.abrupt("return", snapshot.data);

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function snapshot(_x, _x2) {
        return _snapshot.apply(this, arguments);
      }

      return snapshot;
    }()
  }, {
    key: "record",
    value: function () {
      var _record = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(create) {
        var data, id;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return create(this.provider);

              case 2:
                data = _context2.sent;
                _context2.next = 5;
                return this.provider.send('evm_snapshot', []);

              case 5:
                id = _context2.sent;
                return _context2.abrupt("return", {
                  data: data,
                  id: id
                });

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function record(_x3) {
        return _record.apply(this, arguments);
      }

      return record;
    }()
  }, {
    key: "revert",
    value: function () {
      var _revert = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(snapshot, create) {
        var _create$name, name, id;

        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.provider.send('evm_revert', [snapshot.id]);

              case 2:
                if (_context3.sent) {
                  _context3.next = 6;
                  break;
                }

                name = (_create$name = create.name) !== null && _create$name !== void 0 ? _create$name : 'unknown';
                console.warn("\nWARNING: Tried to revert to invalid snapshot ".concat(snapshot.id, " (name: \"").concat(name, "\").\n\nAre you trying to revert to a child snapshot after previously reverting to its ancestor? Child snapshots are wiped whenever you return to an ancestor.\n\nWe are going to restore the snapshot state by re-running the provided function. You should fix the snapshot succession in your tests to benefit from the performance improvement of state snapshotting.\n      "));
                return _context3.abrupt("return", this.record(create));

              case 6:
                _context3.next = 8;
                return this.provider.send('evm_snapshot', []);

              case 8:
                id = _context3.sent;
                return _context3.abrupt("return", _objectSpread(_objectSpread({}, snapshot), {}, {
                  id: id
                }));

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function revert(_x4, _x5) {
        return _revert.apply(this, arguments);
      }

      return revert;
    }()
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {};
    }
  }]);

  return Snapshots;
}();

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var EthereumTestnetProvider = /*#__PURE__*/function (_providers$StaticJson) {
  _inherits(EthereumTestnetProvider, _providers$StaticJson);

  var _super = _createSuper(EthereumTestnetProvider);

  function EthereumTestnetProvider(env) {
    var _this;

    _classCallCheck(this, EthereumTestnetProvider);

    _this = _super.call(this);
    _this.env = env;

    _defineProperty(_assertThisInitialized(_this), "snapshots", new Snapshots(_assertThisInitialized(_this)));

    _defineProperty(_assertThisInitialized(_this), "history", new History());

    _defineProperty(_assertThisInitialized(_this), "gas", void 0);

    _defineProperty(_assertThisInitialized(_this), "gasPrice", void 0);

    if (_this.env.network.config.gas !== 'auto') {
      _this.gas = ethers.BigNumber.from(_this.env.network.config.gas).mul(_this.env.network.config.gasMultiplier);
    }

    if (_this.env.network.config.gasPrice !== 'auto') {
      _this.gasPrice = ethers.BigNumber.from(_this.env.network.config.gasPrice);
    }

    return _this;
  }

  _createClass(EthereumTestnetProvider, [{
    key: "snapshot",
    value: function () {
      var _snapshot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(create, id) {
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", this.snapshots.snapshot(create, id));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function snapshot(_x, _x2) {
        return _snapshot.apply(this, arguments);
      }

      return snapshot;
    }()
  }, {
    key: "getSignerWithAddress",
    value: function () {
      var _getSignerWithAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(addressOrIndex) {
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.t0 = signerWithAddress.SignerWithAddress;
                _context2.next = 3;
                return this.getSigner(addressOrIndex);

              case 3:
                _context2.t1 = _context2.sent;
                return _context2.abrupt("return", _context2.t0.create.call(_context2.t0, _context2.t1));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getSignerWithAddress(_x3) {
        return _getSignerWithAddress.apply(this, arguments);
      }

      return getSignerWithAddress;
    }()
  }, {
    key: "send",
    value: function send(method, params) {
      return this.env.network.provider.send(method, params);
    }
  }, {
    key: "estimateGas",
    value: function () {
      var _estimateGas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(transaction) {
        var _this$gas;

        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", (_this$gas = this.gas) !== null && _this$gas !== void 0 ? _this$gas : _get(_getPrototypeOf(EthereumTestnetProvider.prototype), "estimateGas", this).call(this, transaction));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function estimateGas(_x4) {
        return _estimateGas.apply(this, arguments);
      }

      return estimateGas;
    }()
  }, {
    key: "getGasPrice",
    value: function () {
      var _getGasPrice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4() {
        var _this$gasPrice;

        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", (_this$gasPrice = this.gasPrice) !== null && _this$gasPrice !== void 0 ? _this$gasPrice : _get(_getPrototypeOf(EthereumTestnetProvider.prototype), "getGasPrice", this).call(this));

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getGasPrice() {
        return _getGasPrice.apply(this, arguments);
      }

      return getGasPrice;
    }()
  }]);

  return EthereumTestnetProvider;
}(ethers.providers.StaticJsonRpcProvider);

exports.EthereumTestnetProvider = EthereumTestnetProvider;
exports.History = History;
exports.Snapshots = Snapshots;
