import _asyncToGenerator from '@babel/runtime/helpers/esm/asyncToGenerator';
import _slicedToArray from '@babel/runtime/helpers/esm/slicedToArray';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import fs from 'fs-extra';
import path from 'path';

function regexOrString(matcher) {
  try {
    if (matcher instanceof RegExp) {
      return matcher;
    }

    if (matcher.startsWith('/') && matcher.endsWith('/') || matcher.endsWith('/i')) {
      var _matcher$split = matcher.split('/'),
          _matcher$split2 = _slicedToArray(_matcher$split, 3),
          regex = _matcher$split2[1],
          flags = _matcher$split2[2];

      return new RegExp(regex, flags);
    }

    return matcher;
  } catch (e) {
    return matcher;
  }
}
function validateDir(root, relative) {
  var dir = path.resolve(root, relative);

  if (!dir.startsWith(root)) {
    throw new Error('@enzymefinance/hardhat: resolved path must be inside of project directory');
  }

  if (dir === root) {
    throw new Error('@enzymefinance/hardhat: resolved path must not be root directory');
  }

  return dir;
}
function clearDirectory(_x) {
  return _clearDirectory.apply(this, arguments);
}

function _clearDirectory() {
  _clearDirectory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dir) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return fs.pathExists(dir);

          case 2:
            if (!_context.sent) {
              _context.next = 5;
              break;
            }

            _context.next = 5;
            return fs.remove(dir);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _clearDirectory.apply(this, arguments);
}

function createDirectory(_x2) {
  return _createDirectory.apply(this, arguments);
}

function _createDirectory() {
  _createDirectory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dir) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return fs.pathExists(dir);

          case 2:
            if (_context2.sent) {
              _context2.next = 5;
              break;
            }

            _context2.next = 5;
            return fs.mkdirp(dir);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _createDirectory.apply(this, arguments);
}

export { clearDirectory as a, createDirectory as c, regexOrString as r, validateDir as v };
