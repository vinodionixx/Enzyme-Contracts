import { BigNumber, providers, utils } from 'ethers';
import type { HardhatRuntimeEnvironment } from 'hardhat/types';
import { History } from './history';
import { SignerWithAddress } from './signer';
import { FixtureCreator, Snapshots } from './snapshots';
export declare class EthereumTestnetProvider extends providers.StaticJsonRpcProvider {
    readonly env: HardhatRuntimeEnvironment;
    readonly snapshots: Snapshots<this>;
    readonly history: History;
    readonly gas: undefined | BigNumber;
    readonly gasPrice: undefined | BigNumber;
    constructor(env: HardhatRuntimeEnvironment);
    snapshot<TFixture>(create: FixtureCreator<TFixture, this>, id?: string): Promise<TFixture>;
    getSignerWithAddress(addressOrIndex: string | number): Promise<SignerWithAddress>;
    send(method: string, params: any): Promise<any>;
    estimateGas(transaction: utils.Deferrable<providers.TransactionRequest>): Promise<BigNumber>;
    getGasPrice(): Promise<BigNumber>;
}
