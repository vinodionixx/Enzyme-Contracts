import { ParseResult } from './parser';
export interface InstrumentationBase {
    type: string;
    id: number;
    target: string;
}
export interface StatementInstrumentation extends InstrumentationBase {
    type: 'statement';
}
export interface BranchInstrumentation extends InstrumentationBase {
    type: 'branch';
    branch: number;
}
export interface FunctionInstrumentation extends InstrumentationBase {
    type: 'function';
}
export declare type Instrumentation = StatementInstrumentation | BranchInstrumentation | FunctionInstrumentation;
export interface InjectionBase {
    type: string;
    contract: string;
}
export interface HashMethodInjection extends InjectionBase {
    type: 'HashMethod';
}
export interface FunctionInjection extends InjectionBase {
    type: 'Function';
    id: number;
}
export interface StatementInjection extends InjectionBase {
    type: 'Statement';
    id: number;
}
export interface BranchInjection extends InjectionBase {
    type: 'Branch';
    id: number;
    branch: number;
}
export declare enum BlockDelimiter {
    OPEN = "{",
    CLOSE = "}"
}
export interface BlockDelimiterInjection extends InjectionBase {
    type: 'BlockDelimiter';
    delimiter: BlockDelimiter;
}
export declare type InstrumentationInjection = FunctionInjection | StatementInjection | BranchInjection;
export declare type Injection = InstrumentationInjection | HashMethodInjection | BlockDelimiterInjection;
export interface InstrumentationTarget extends ParseResult {
    target: string;
    instrumented: string;
    instrumentations: Record<string, Instrumentation>;
}
export declare function inject(parsed: ParseResult, path: string): InstrumentationTarget;
