/* eslint-disable */
// @ts-nocheck
import { BytesLike, BigNumber, BigNumberish } from 'ethers';
import { contract, Call, Send, AddressLike, Contract } from '@enzymefinance/ethers';

export type MockCEtherIntegrateeArgs = [
  _name: string,
  _symbol: string,
  _decimals: BigNumberish,
  _weth: AddressLike,
  _centralizedRateProvider: AddressLike,
  _initialRate: BigNumberish,
];

// prettier-ignore
export interface MockCEtherIntegratee extends Contract<MockCEtherIntegratee> {
  ETH_ADDRESS: Call<() => string, MockCEtherIntegratee>
  allowance: Call<(_owner: AddressLike, _spender: AddressLike) => BigNumber, MockCEtherIntegratee>
  approve: Send<(_spender: AddressLike, _amount: BigNumberish) => boolean, MockCEtherIntegratee>
  balanceOf: Call<(account: AddressLike) => BigNumber, MockCEtherIntegratee>
  decimals: Call<() => BigNumber, MockCEtherIntegratee>
  decreaseAllowance: Send<(spender: AddressLike, subtractedValue: BigNumberish) => boolean, MockCEtherIntegratee>
  exchangeRateStored: Call<() => BigNumber, MockCEtherIntegratee>
  getCentralizedRateProvider: Call<() => string, MockCEtherIntegratee>
  increaseAllowance: Send<(spender: AddressLike, addedValue: BigNumberish) => boolean, MockCEtherIntegratee>
  mint: Send<() => void, MockCEtherIntegratee>
  mintFor: Send<(_who: AddressLike, _amount: BigNumberish) => void, MockCEtherIntegratee>
  name: Call<() => string, MockCEtherIntegratee>
  owner: Call<() => string, MockCEtherIntegratee>
  redeem: Send<(_amount: BigNumberish) => BigNumber, MockCEtherIntegratee>
  renounceOwnership: Send<() => void, MockCEtherIntegratee>
  setRate: Send<(_rate: BigNumberish) => void, MockCEtherIntegratee>
  symbol: Call<() => string, MockCEtherIntegratee>
  totalSupply: Call<() => BigNumber, MockCEtherIntegratee>
  transfer: Send<(recipient: AddressLike, amount: BigNumberish) => boolean, MockCEtherIntegratee>
  transferFrom: Send<(_sender: AddressLike, _recipient: AddressLike, _amount: BigNumberish) => boolean, MockCEtherIntegratee>
  transferOwnership: Send<(newOwner: AddressLike) => void, MockCEtherIntegratee>
  underlying: Call<() => string, MockCEtherIntegratee>
}

let MockCEtherIntegrateeBytecode: string | undefined = undefined;
if (typeof window === 'undefined') {
  MockCEtherIntegrateeBytecode =
    '0x60c06040523480156200001157600080fd5b5060405162001d2c38038062001d2c833981810160405260c08110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b50604090815260208281015191830151606084015160809094015188519396509094509187918791879187918791879187918791620001de9160039190850190620002b9565b508051620001f4906004906020840190620002b9565b50506005805460ff19166012179055506000620002106200029f565b60058054610100600160a81b0319166101006001600160a01b03841690810291909117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506200027184620002a3565b6001600160601b0319606093841b81166080529190921b1660a0526006555062000355975050505050505050565b3390565b6005805460ff191660ff92909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002fc57805160ff19168380011785556200032c565b828001600101855582156200032c579182015b828111156200032c5782518255916020019190600101906200030f565b506200033a9291506200033e565b5090565b5b808211156200033a57600081556001016200033f565b60805160601c60a05160601c611994620003986000398061099a5280610c0b5280610ccd52508061072d52806109cb5280610c325280610d0152506119946000f3fe6080604052600436106101395760003560e01c8063715018a6116100ab578063a9059cbb1161006f578063a9059cbb14610424578063da1919b31461045d578063db006a7514610496578063dd62ed3e146104c0578063f2fde38b146104fb578063fc3e06c91461052e57610140565b8063715018a6146103975780638da5cb5b146103ac57806395d89b41146103c1578063a457c2d7146103d6578063a734f06e1461040f57610140565b806323b872dd116100fd57806323b872dd14610262578063313ce567146102a557806334fcf437146102d057806339509351146102fa5780636f307dc31461033357806370a082311461036457610140565b806306fdde0314610145578063095ea7b3146101cf5780631249c58b1461021c57806318160ddd14610226578063182df0f51461024d57610140565b3661014057005b600080fd5b34801561015157600080fd5b5061015a610543565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019457818101518382015260200161017c565b50505050905090810190601f1680156101c15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101db57600080fd5b50610208600480360360408110156101f257600080fd5b506001600160a01b0381351690602001356105d9565b604080519115158252519081900360200190f35b610224610608565b005b34801561023257600080fd5b5061023b61063c565b60408051918252519081900360200190f35b34801561025957600080fd5b5061023b610642565b34801561026e57600080fd5b506102086004803603606081101561028557600080fd5b506001600160a01b03813581169160208101359091169060400135610648565b3480156102b157600080fd5b506102ba61065f565b6040805160ff9092168252519081900360200190f35b3480156102dc57600080fd5b50610224600480360360208110156102f357600080fd5b5035610668565b34801561030657600080fd5b506102086004803603604081101561031d57600080fd5b506001600160a01b0381351690602001356106cf565b34801561033f57600080fd5b5061034861072b565b604080516001600160a01b039092168252519081900360200190f35b34801561037057600080fd5b5061023b6004803603602081101561038757600080fd5b50356001600160a01b031661074f565b3480156103a357600080fd5b5061022461076a565b3480156103b857600080fd5b5061034861081c565b3480156103cd57600080fd5b5061015a610830565b3480156103e257600080fd5b50610208600480360360408110156103f957600080fd5b506001600160a01b038135169060200135610891565b34801561041b57600080fd5b506103486108f9565b34801561043057600080fd5b506102086004803603604081101561044757600080fd5b506001600160a01b038135169060200135610911565b34801561046957600080fd5b506102246004803603604081101561048057600080fd5b506001600160a01b038135169060200135610925565b3480156104a257600080fd5b5061023b600480360360208110156104b957600080fd5b5035610995565b3480156104cc57600080fd5b5061023b600480360360408110156104e357600080fd5b506001600160a01b0381358116916020013516610a97565b34801561050757600080fd5b506102246004803603602081101561051e57600080fd5b50356001600160a01b0316610afb565b34801561053a57600080fd5b50610348610c09565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105cf5780601f106105a4576101008083540402835291602001916105cf565b820191906000526020600020905b8154815290600101906020018083116105b257829003601f168201915b5050505050905090565b3360009081526007602090815260408083206001600160a01b0386168452909152902081905560015b92915050565b34600061061482610c2d565b90506106373373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee843085610ddf565b505050565b60025490565b60065490565b6000610655848484610f23565b5060019392505050565b60055460ff1690565b61067061107e565b6001600160a01b031661068161081c565b6001600160a01b0316146106ca576040805162461bcd60e51b81526020600482018190526024820152600080516020611848833981519152604482015290519081900360640190fd5b600655565b60006107226106dc61107e565b8461071d85600160006106ed61107e565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611082565b6110e3565b50600192915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b031660009081526020819052604090205490565b61077261107e565b6001600160a01b031661078361081c565b6001600160a01b0316146107cc576040805162461bcd60e51b81526020600482018190526024820152600080516020611848833981519152604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b60055461010090046001600160a01b031690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105cf5780601f106105a4576101008083540402835291602001916105cf565b600061072261089e61107e565b8461071d8560405180606001604052806025815260200161193a60259139600160006108c861107e565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906111cf565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b600061072261091e61107e565b8484610f23565b61092d61107e565b6001600160a01b031661093e61081c565b6001600160a01b031614610987576040805162461bcd60e51b81526020600482018190526024820152600080516020611848833981519152604482015290519081900360640190fd5b6109918282611266565b5050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637733db7d30857f00000000000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b815260040180846001600160a01b03168152602001838152602001826001600160a01b031681526020019350505050602060405180830381600087803b158015610a4057600080fd5b505af1158015610a54573d6000803e3d6000fd5b505050506040513d6020811015610a6a57600080fd5b50519050610a8f33308573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee85610ddf565b509192915050565b60006001600160a01b038216301480610ac15750816001600160a01b0316836001600160a01b0316145b15610acf5750600019610602565b506001600160a01b03808316600090815260076020908152604080832093851683529290522054610602565b610b0361107e565b6001600160a01b0316610b1461081c565b6001600160a01b031614610b5d576040805162461bcd60e51b81526020600482018190526024820152600080516020611848833981519152604482015290519081900360640190fd5b6001600160a01b038116610ba25760405162461bcd60e51b81526004018080602001828103825260268152602001806117886026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8957600080fd5b505afa158015610c9d573d6000803e3d6000fd5b505050506040513d6020811015610cb357600080fd5b505160ff1690506000610cc461065f565b60ff16905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637733db7d3084600a0a7f00000000000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b815260040180846001600160a01b03168152602001838152602001826001600160a01b031681526020019350505050602060405180830381600087803b158015610d7657600080fd5b505af1158015610d8a573d6000803e3d6000fd5b505050506040513d6020811015610da057600080fd5b505190506000610dc182610dbb600a87810a9087900a611356565b906113af565b9050610dd5600a85900a610dbb8884611356565b9695505050505050565b60408051600180825281830190925260009160609190602080830190803683370190505090508581600081518110610e1357fe5b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526060918160200160208202803683370190505090508581600081518110610e5e57fe5b60209081029190910101526040805160018082528183019092526060918160200160208202803683370190505090508581600081518110610e9b57fe5b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526060918160200160208202803683370190505090508581600081518110610ee657fe5b602002602001018181525050610eff8a85858585611416565b80600081518110610f0c57fe5b602002602001015194505050505095945050505050565b6001600160a01b038316610f685760405162461bcd60e51b81526004018080602001828103825260258152602001806118c76025913960400191505060405180910390fd5b6001600160a01b038216610fad5760405162461bcd60e51b81526004018080602001828103825260238152602001806117656023913960400191505060405180910390fd5b610fb8838383610637565b610ff5816040518060600160405280602681526020016117d0602691396001600160a01b03861660009081526020819052604090205491906111cf565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546110249082611082565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b3390565b6000828201838110156110dc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b0383166111285760405162461bcd60e51b81526004018080602001828103825260248152602001806118ec6024913960400191505060405180910390fd5b6001600160a01b03821661116d5760405162461bcd60e51b81526004018080602001828103825260228152602001806117ae6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000818484111561125e5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561122357818101518382015260200161120b565b50505050905090810190601f1680156112505780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166112c1576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6112cd60008383610637565b6002546112da9082611082565b6002556001600160a01b0382166000908152602081905260409020546113009082611082565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008261136557506000610602565b8282028284828161137257fe5b04146110dc5760405162461bcd60e51b81526004018080602001828103825260218152602001806118276021913960400191505060405180910390fd5b6000808211611405576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161140e57fe5b049392505050565b60005b845181101561159f57600085828151811061143057fe5b60200260200101519050600085838151811061144857fe5b6020026020010151905060006001600160a01b0316826001600160a01b031614156114a45760405162461bcd60e51b815260040180806020018281038252602a815260200180611910602a913960400191505060405180910390fd5b600081116114e35760405162461bcd60e51b81526004018080602001828103825260318152602001806117f66031913960400191505060405180910390fd5b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561150f575050611597565b604080516323b872dd60e01b81526001600160a01b038a81166004830152306024830152604482018490529151918416916323b872dd916064808201926020929091908290030181600087803b15801561156857600080fd5b505af115801561157c573d6000803e3d6000fd5b505050506040513d602081101561159257600080fd5b505050505b600101611419565b5060005b825181101561175c5760008382815181106115ba57fe5b6020026020010151905060008383815181106115d257fe5b6020026020010151905060006001600160a01b0316826001600160a01b0316141561162e5760405162461bcd60e51b815260040180806020018281038252602c815260200180611868602c913960400191505060405180910390fd5b6000811161166d5760405162461bcd60e51b81526004018080602001828103825260338152602001806118946033913960400191505060405180910390fd5b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156116ce576040516001600160a01b0389169082156108fc029083906000818181858888f193505050501580156116c8573d6000803e3d6000fd5b50611752565b816001600160a01b031663a9059cbb89836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561172557600080fd5b505af1158015611739573d6000803e3d6000fd5b505050506040513d602081101561174f57600080fd5b50505b50506001016115a3565b50505050505056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63655f5f737761703a20656d7074792076616c756520696e205f617373657473546f496e7465677261746565416d6f756e7473536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f5f737761703a20656d7074792076616c756520696e205f61737365747346726f6d496e74656772617465655f5f737761703a20656d7074792076616c756520696e205f61737365747346726f6d496e7465677261746565416d6f756e747345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735f5f737761703a20656d7074792076616c756520696e205f617373657473546f496e746567726174656545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ceec6119961a14b2ed2865da849ddda0d9884fec10e761e7de8568e1f8a5392f64736f6c634300060c0033';
}

// prettier-ignore
export const MockCEtherIntegratee = contract<MockCEtherIntegratee, MockCEtherIntegrateeArgs>(MockCEtherIntegrateeBytecode)`
  constructor(string _name, string _symbol, uint8 _decimals, address _weth, address _centralizedRateProvider, uint256 _initialRate)
  event Approval(address indexed owner, address indexed spender, uint256 value)
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
  event Transfer(address indexed from, address indexed to, uint256 value)
  function ETH_ADDRESS() view returns (address)
  function allowance(address _owner, address _spender) view returns (uint256)
  function approve(address _spender, uint256 _amount) returns (bool)
  function balanceOf(address account) view returns (uint256)
  function decimals() view returns (uint8)
  function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)
  function exchangeRateStored() view returns (uint256)
  function getCentralizedRateProvider() view returns (address)
  function increaseAllowance(address spender, uint256 addedValue) returns (bool)
  function mint() payable
  function mintFor(address _who, uint256 _amount)
  function name() view returns (string)
  function owner() view returns (address)
  function redeem(uint256 _amount) returns (uint256)
  function renounceOwnership()
  function setRate(uint256 _rate)
  function symbol() view returns (string)
  function totalSupply() view returns (uint256)
  function transfer(address recipient, uint256 amount) returns (bool)
  function transferFrom(address _sender, address _recipient, uint256 _amount) returns (bool)
  function transferOwnership(address newOwner)
  function underlying() view returns (address)
`;
