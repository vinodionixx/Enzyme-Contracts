/* eslint-disable */
// @ts-nocheck
import { BytesLike, BigNumber, BigNumberish } from 'ethers';
import { contract, Call, Send, AddressLike, Contract } from '@enzymefinance/ethers';

export type MockCTokenIntegrateeArgs = [
  _name: string,
  _symbol: string,
  _decimals: BigNumberish,
  _token: AddressLike,
  _centralizedRateProvider: AddressLike,
  _initialRate: BigNumberish,
];

// prettier-ignore
export interface MockCTokenIntegratee extends Contract<MockCTokenIntegratee> {
  ETH_ADDRESS: Call<() => string, MockCTokenIntegratee>
  allowance: Call<(_owner: AddressLike, _spender: AddressLike) => BigNumber, MockCTokenIntegratee>
  approve: Send<(_spender: AddressLike, _amount: BigNumberish) => boolean, MockCTokenIntegratee>
  balanceOf: Call<(account: AddressLike) => BigNumber, MockCTokenIntegratee>
  decimals: Call<() => BigNumber, MockCTokenIntegratee>
  decreaseAllowance: Send<(spender: AddressLike, subtractedValue: BigNumberish) => boolean, MockCTokenIntegratee>
  exchangeRateStored: Call<() => BigNumber, MockCTokenIntegratee>
  getCentralizedRateProvider: Call<() => string, MockCTokenIntegratee>
  increaseAllowance: Send<(spender: AddressLike, addedValue: BigNumberish) => boolean, MockCTokenIntegratee>
  mint: Send<(_amount: BigNumberish) => BigNumber, MockCTokenIntegratee>
  mintFor: Send<(_who: AddressLike, _amount: BigNumberish) => void, MockCTokenIntegratee>
  name: Call<() => string, MockCTokenIntegratee>
  owner: Call<() => string, MockCTokenIntegratee>
  redeem: Send<(_amount: BigNumberish) => BigNumber, MockCTokenIntegratee>
  renounceOwnership: Send<() => void, MockCTokenIntegratee>
  setRate: Send<(_rate: BigNumberish) => void, MockCTokenIntegratee>
  symbol: Call<() => string, MockCTokenIntegratee>
  totalSupply: Call<() => BigNumber, MockCTokenIntegratee>
  transfer: Send<(recipient: AddressLike, amount: BigNumberish) => boolean, MockCTokenIntegratee>
  transferFrom: Send<(_sender: AddressLike, _recipient: AddressLike, _amount: BigNumberish) => boolean, MockCTokenIntegratee>
  transferOwnership: Send<(newOwner: AddressLike) => void, MockCTokenIntegratee>
  underlying: Call<() => string, MockCTokenIntegratee>
}

let MockCTokenIntegrateeBytecode: string | undefined = undefined;
if (typeof window === 'undefined') {
  MockCTokenIntegrateeBytecode =
    '0x60c06040523480156200001157600080fd5b5060405162001ba338038062001ba3833981810160405260c08110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b50604090815260208281015191830151606084015160809094015188519396509094509187918791879187918791879187918791620001de9160039190850190620002b9565b508051620001f4906004906020840190620002b9565b50506005805460ff19166012179055506000620002106200029f565b60058054610100600160a81b0319166101006001600160a01b03841690810291909117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506200027184620002a3565b6001600160601b0319606093841b81166080529190921b1660a0526006555062000355975050505050505050565b3390565b6005805460ff191660ff92909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002fc57805160ff19168380011785556200032c565b828001600101855582156200032c579182015b828111156200032c5782518255916020019190600101906200030f565b506200033a9291506200033e565b5090565b5b808211156200033a57600081556001016200033f565b60805160601c60a05160601c6118066200039d600039806108845280610a965280610d0b52508061071b52806108b3528061095e5280610ac75280610b7252506118066000f3fe6080604052600436106101395760003560e01c80638da5cb5b116100ab578063a9059cbb1161006f578063a9059cbb14610446578063da1919b31461047f578063db006a75146104b8578063dd62ed3e146104e2578063f2fde38b1461051d578063fc3e06c91461055057610140565b80638da5cb5b146103a457806395d89b41146103b9578063a0712d68146103ce578063a457c2d7146103f8578063a734f06e1461043157610140565b8063313ce567116100fd578063313ce5671461029b57806334fcf437146102c657806339509351146102f25780636f307dc31461032b57806370a082311461035c578063715018a61461038f57610140565b806306fdde0314610145578063095ea7b3146101cf57806318160ddd1461021c578063182df0f51461024357806323b872dd1461025857610140565b3661014057005b600080fd5b34801561015157600080fd5b5061015a610565565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019457818101518382015260200161017c565b50505050905090810190601f1680156101c15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101db57600080fd5b50610208600480360360408110156101f257600080fd5b506001600160a01b0381351690602001356105fb565b604080519115158252519081900360200190f35b34801561022857600080fd5b5061023161062a565b60408051918252519081900360200190f35b34801561024f57600080fd5b50610231610630565b34801561026457600080fd5b506102086004803603606081101561027b57600080fd5b506001600160a01b03813581169160208101359091169060400135610636565b3480156102a757600080fd5b506102b061064d565b6040805160ff9092168252519081900360200190f35b3480156102d257600080fd5b506102f0600480360360208110156102e957600080fd5b5035610656565b005b3480156102fe57600080fd5b506102086004803603604081101561031557600080fd5b506001600160a01b0381351690602001356106bd565b34801561033757600080fd5b50610340610719565b604080516001600160a01b039092168252519081900360200190f35b34801561036857600080fd5b506102316004803603602081101561037f57600080fd5b50356001600160a01b031661073d565b34801561039b57600080fd5b506102f0610758565b3480156103b057600080fd5b5061034061080a565b3480156103c557600080fd5b5061015a61081e565b3480156103da57600080fd5b50610231600480360360208110156103f157600080fd5b503561087f565b34801561040457600080fd5b506102086004803603604081101561041b57600080fd5b506001600160a01b03813516906020013561098d565b34801561043d57600080fd5b506103406109f5565b34801561045257600080fd5b506102086004803603604081101561046957600080fd5b506001600160a01b038135169060200135610a0d565b34801561048b57600080fd5b506102f0600480360360408110156104a257600080fd5b506001600160a01b038135169060200135610a21565b3480156104c457600080fd5b50610231600480360360208110156104db57600080fd5b5035610a91565b3480156104ee57600080fd5b506102316004803603604081101561050557600080fd5b506001600160a01b0381358116916020013516610b97565b34801561052957600080fd5b506102f06004803603602081101561054057600080fd5b50356001600160a01b0316610bfb565b34801561055c57600080fd5b50610340610d09565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105f15780601f106105c6576101008083540402835291602001916105f1565b820191906000526020600020905b8154815290600101906020018083116105d457829003601f168201915b5050505050905090565b3360009081526007602090815260408083206001600160a01b0386168452909152902081905560015b92915050565b60025490565b60065490565b6000610643848484610d2d565b5060019392505050565b60055460ff1690565b61065e610e88565b6001600160a01b031661066f61080a565b6001600160a01b0316146106b8576040805162461bcd60e51b815260206004820181905260248201526000805160206116ba833981519152604482015290519081900360640190fd5b600655565b60006107106106ca610e88565b8461070b85600160006106db610e88565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610e8c565b610eed565b50600192915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b031660009081526020819052604090205490565b610760610e88565b6001600160a01b031661077161080a565b6001600160a01b0316146107ba576040805162461bcd60e51b815260206004820181905260248201526000805160206116ba833981519152604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b60055461010090046001600160a01b031690565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105f15780601f106105c6576101008083540402835291602001916105f1565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637733db7d7f000000000000000000000000000000000000000000000000000000000000000085306040518463ffffffff1660e01b815260040180846001600160a01b03168152602001838152602001826001600160a01b031681526020019350505050602060405180830381600087803b15801561092a57600080fd5b505af115801561093e573d6000803e3d6000fd5b505050506040513d602081101561095457600080fd5b50519050610985337f0000000000000000000000000000000000000000000000000000000000000000853085610fd9565b509192915050565b600061071061099a610e88565b8461070b856040518060600160405280602581526020016117ac60259139600160006109c4610e88565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919061111d565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6000610710610a1a610e88565b8484610d2d565b610a29610e88565b6001600160a01b0316610a3a61080a565b6001600160a01b031614610a83576040805162461bcd60e51b815260206004820181905260248201526000805160206116ba833981519152604482015290519081900360640190fd5b610a8d82826111b4565b5050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637733db7d30857f00000000000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b815260040180846001600160a01b03168152602001838152602001826001600160a01b031681526020019350505050602060405180830381600087803b158015610b3c57600080fd5b505af1158015610b50573d6000803e3d6000fd5b505050506040513d6020811015610b6657600080fd5b505190506109853330857f000000000000000000000000000000000000000000000000000000000000000085610fd9565b60006001600160a01b038216301480610bc15750816001600160a01b0316836001600160a01b0316145b15610bcf5750600019610624565b506001600160a01b03808316600090815260076020908152604080832093851683529290522054610624565b610c03610e88565b6001600160a01b0316610c1461080a565b6001600160a01b031614610c5d576040805162461bcd60e51b815260206004820181905260248201526000805160206116ba833981519152604482015290519081900360640190fd5b6001600160a01b038116610ca25760405162461bcd60e51b815260040180806020018281038252602681526020018061161b6026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b038316610d725760405162461bcd60e51b81526004018080602001828103825260258152602001806117396025913960400191505060405180910390fd5b6001600160a01b038216610db75760405162461bcd60e51b81526004018080602001828103825260238152602001806115f86023913960400191505060405180910390fd5b610dc28383836112a4565b610dff81604051806060016040528060268152602001611663602691396001600160a01b038616600090815260208190526040902054919061111d565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610e2e9082610e8c565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b3390565b600082820183811015610ee6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038316610f325760405162461bcd60e51b815260040180806020018281038252602481526020018061175e6024913960400191505060405180910390fd5b6001600160a01b038216610f775760405162461bcd60e51b81526004018080602001828103825260228152602001806116416022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6040805160018082528183019092526000916060919060208083019080368337019050509050858160008151811061100d57fe5b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252606091816020016020820280368337019050509050858160008151811061105857fe5b6020908102919091010152604080516001808252818301909252606091816020016020820280368337019050509050858160008151811061109557fe5b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260609181602001602082028036833701905050905085816000815181106110e057fe5b6020026020010181815250506110f98a858585856112a9565b8060008151811061110657fe5b602002602001015194505050505095945050505050565b600081848411156111ac5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611171578181015183820152602001611159565b50505050905090810190601f16801561119e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b03821661120f576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61121b600083836112a4565b6002546112289082610e8c565b6002556001600160a01b03821660009081526020819052604090205461124e9082610e8c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b60005b84518110156114325760008582815181106112c357fe5b6020026020010151905060008583815181106112db57fe5b6020026020010151905060006001600160a01b0316826001600160a01b031614156113375760405162461bcd60e51b815260040180806020018281038252602a815260200180611782602a913960400191505060405180910390fd5b600081116113765760405162461bcd60e51b81526004018080602001828103825260318152602001806116896031913960400191505060405180910390fd5b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156113a257505061142a565b604080516323b872dd60e01b81526001600160a01b038a81166004830152306024830152604482018490529151918416916323b872dd916064808201926020929091908290030181600087803b1580156113fb57600080fd5b505af115801561140f573d6000803e3d6000fd5b505050506040513d602081101561142557600080fd5b505050505b6001016112ac565b5060005b82518110156115ef57600083828151811061144d57fe5b60200260200101519050600083838151811061146557fe5b6020026020010151905060006001600160a01b0316826001600160a01b031614156114c15760405162461bcd60e51b815260040180806020018281038252602c8152602001806116da602c913960400191505060405180910390fd5b600081116115005760405162461bcd60e51b81526004018080602001828103825260338152602001806117066033913960400191505060405180910390fd5b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611561576040516001600160a01b0389169082156108fc029083906000818181858888f1935050505015801561155b573d6000803e3d6000fd5b506115e5565b816001600160a01b031663a9059cbb89836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156115b857600080fd5b505af11580156115cc573d6000803e3d6000fd5b505050506040513d60208110156115e257600080fd5b50505b5050600101611436565b50505050505056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63655f5f737761703a20656d7074792076616c756520696e205f617373657473546f496e7465677261746565416d6f756e74734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f5f737761703a20656d7074792076616c756520696e205f61737365747346726f6d496e74656772617465655f5f737761703a20656d7074792076616c756520696e205f61737365747346726f6d496e7465677261746565416d6f756e747345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735f5f737761703a20656d7074792076616c756520696e205f617373657473546f496e746567726174656545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212201003b12c8329f3ed48ac069bf7a00665c56fbc7053ae2efc1dbedcc1bf1958e364736f6c634300060c0033';
}

// prettier-ignore
export const MockCTokenIntegratee = contract<MockCTokenIntegratee, MockCTokenIntegrateeArgs>(MockCTokenIntegrateeBytecode)`
  constructor(string _name, string _symbol, uint8 _decimals, address _token, address _centralizedRateProvider, uint256 _initialRate)
  event Approval(address indexed owner, address indexed spender, uint256 value)
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
  event Transfer(address indexed from, address indexed to, uint256 value)
  function ETH_ADDRESS() view returns (address)
  function allowance(address _owner, address _spender) view returns (uint256)
  function approve(address _spender, uint256 _amount) returns (bool)
  function balanceOf(address account) view returns (uint256)
  function decimals() view returns (uint8)
  function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)
  function exchangeRateStored() view returns (uint256)
  function getCentralizedRateProvider() view returns (address)
  function increaseAllowance(address spender, uint256 addedValue) returns (bool)
  function mint(uint256 _amount) returns (uint256)
  function mintFor(address _who, uint256 _amount)
  function name() view returns (string)
  function owner() view returns (address)
  function redeem(uint256 _amount) returns (uint256)
  function renounceOwnership()
  function setRate(uint256 _rate)
  function symbol() view returns (string)
  function totalSupply() view returns (uint256)
  function transfer(address recipient, uint256 amount) returns (bool)
  function transferFrom(address _sender, address _recipient, uint256 _amount) returns (bool)
  function transferOwnership(address newOwner)
  function underlying() view returns (address)
`;
