/* eslint-disable */
// @ts-nocheck
import { BytesLike, BigNumber, BigNumberish } from 'ethers';
import { contract, Call, Send, AddressLike, Contract } from '@enzymefinance/ethers';

export type MockUniswapV2PriceSourceArgs = [
  _centralizedRateProvider: AddressLike,
  _token0: AddressLike,
  _token1: AddressLike,
];

// prettier-ignore
export interface MockUniswapV2PriceSource extends Contract<MockUniswapV2PriceSource> {
  addMinters: Send<(_minters: AddressLike[]) => void, MockUniswapV2PriceSource>
  allowance: Call<(owner: AddressLike, spender: AddressLike) => BigNumber, MockUniswapV2PriceSource>
  approve: Send<(spender: AddressLike, amount: BigNumberish) => boolean, MockUniswapV2PriceSource>
  balanceOf: Call<(account: AddressLike) => BigNumber, MockUniswapV2PriceSource>
  burn: Send<(amount: BigNumberish) => void, MockUniswapV2PriceSource>
  burnFrom: Send<(account: AddressLike, amount: BigNumberish) => void, MockUniswapV2PriceSource>
  decimals: Call<() => BigNumber, MockUniswapV2PriceSource>
  decreaseAllowance: Send<(spender: AddressLike, subtractedValue: BigNumberish) => boolean, MockUniswapV2PriceSource>
  getReserves: Send<() => { reserve0_: BigNumber, reserve1_: BigNumber, blockTimestampLast_: BigNumber }, MockUniswapV2PriceSource>
  increaseAllowance: Send<(spender: AddressLike, addedValue: BigNumberish) => boolean, MockUniswapV2PriceSource>
  kLast: Call<() => BigNumber, MockUniswapV2PriceSource>
  mint: Send<(_amount: BigNumberish) => void, MockUniswapV2PriceSource>
  mintFor: Send<(_who: AddressLike, _amount: BigNumberish) => void, MockUniswapV2PriceSource>
  name: Call<() => string, MockUniswapV2PriceSource>
  owner: Call<() => string, MockUniswapV2PriceSource>
  renounceOwnership: Send<() => void, MockUniswapV2PriceSource>
  symbol: Call<() => string, MockUniswapV2PriceSource>
  token0: Call<() => string, MockUniswapV2PriceSource>
  token1: Call<() => string, MockUniswapV2PriceSource>
  totalSupply: Call<() => BigNumber, MockUniswapV2PriceSource>
  transfer: Send<(recipient: AddressLike, amount: BigNumberish) => boolean, MockUniswapV2PriceSource>
  transferFrom: Send<(sender: AddressLike, recipient: AddressLike, amount: BigNumberish) => boolean, MockUniswapV2PriceSource>
  transferOwnership: Send<(newOwner: AddressLike) => void, MockUniswapV2PriceSource>
}

let MockUniswapV2PriceSourceBytecode: string | undefined = undefined;
if (typeof window === 'undefined') {
  MockUniswapV2PriceSourceBytecode =
    '';
}

// prettier-ignore
export const MockUniswapV2PriceSource = contract<MockUniswapV2PriceSource, MockUniswapV2PriceSourceArgs>(MockUniswapV2PriceSourceBytecode)`
  constructor(address _centralizedRateProvider, address _token0, address _token1)
  event Approval(address indexed owner, address indexed spender, uint256 value)
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
  event Transfer(address indexed from, address indexed to, uint256 value)
  function addMinters(address[] _minters)
  function allowance(address owner, address spender) view returns (uint256)
  function approve(address spender, uint256 amount) returns (bool)
  function balanceOf(address account) view returns (uint256)
  function burn(uint256 amount)
  function burnFrom(address account, uint256 amount)
  function decimals() view returns (uint8)
  function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)
  function getReserves() returns (uint112 reserve0_, uint112 reserve1_, uint32 blockTimestampLast_)
  function increaseAllowance(address spender, uint256 addedValue) returns (bool)
  function kLast() pure returns (uint256)
  function mint(uint256 _amount)
  function mintFor(address _who, uint256 _amount)
  function name() view returns (string)
  function owner() view returns (address)
  function renounceOwnership()
  function symbol() view returns (string)
  function token0() view returns (address)
  function token1() view returns (address)
  function totalSupply() view returns (uint256)
  function transfer(address recipient, uint256 amount) returns (bool)
  function transferFrom(address sender, address recipient, uint256 amount) returns (bool)
  function transferOwnership(address newOwner)
`;
